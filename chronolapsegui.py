#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Tue Jun 28 17:45:11 2011

import wx

# begin wxGlade: extracode
import wx.lib.masked as masked
class ProgressPanel(wx.Panel):

    def __init__(self, *args, **kwds):
        wx.Panel.__init__(self, *args, **kwds)
        self.Bind(wx.EVT_PAINT, self.OnPaint)

        self.progress = 0

    def setProgress(self, progress):
        self.progress = progress

        dc = wx.WindowDC(self)
        dc.SetPen(wx.Pen(wx.Colour(0,0,255,255)))
        dc.SetBrush(wx.Brush(wx.Colour(0,0,255,220)))

        # build rect
        width,height = self.GetSizeTuple()
        size = max(2, (width-10)*self.progress)
        rect = wx.Rect(5,8, size ,5)

        # draw rect
        dc.Clear()
        dc.DrawRoundedRectangleRect(rect, 2)

    def OnPaint(self, evt):
        # this doesnt appear to work at all...

        width,height = self.GetSizeTuple()

        # get drawing shit
        dc = wx.PaintDC(self)

        dc.SetPen(wx.Pen(wx.Colour(0,0,255,255)))
        dc.SetBrush(wx.Brush(wx.Colour(0,0,255,220)))

        # build rect
        size = max(2, (width-10)*self.progress)
        rect = wx.Rect(5,8, size ,5)

        # draw rect
        dc.Clear()
        dc.BeginDrawing()
        dc.DrawRoundedRectangleRect(rect, 2)
        dc.EndDrawing()
# end wxGlade



class chronoFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: chronoFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_convertpane = wx.Panel(self.notebook_1, -1)
        self.notebook_1_audiopane = wx.Panel(self.notebook_1, -1)
        self.notebook_1_videopane = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pippane = wx.Panel(self.notebook_1, -1)
        self.notebook_1_annotationpane = wx.Panel(self.notebook_1, -1)
        self.notebook_1_resizepane = wx.Panel(self.notebook_1, -1)
        self.notebook_1_schedulepane = wx.Panel(self.notebook_1, -1)
        self.notebook_1_capturepane = wx.Panel(self.notebook_1, -1)
        
        # Menu Bar
        self.chronoframe_menubar = wx.MenuBar()
        self.aboutmenu = wx.Menu()
        self.instructionsmenuitem = wx.MenuItem(self.aboutmenu, wx.NewId(), "Instructions", "", wx.ITEM_NORMAL)
        self.aboutmenu.AppendItem(self.instructionsmenuitem)
        self.aboutmenuitem = wx.MenuItem(self.aboutmenu, wx.NewId(), "About", "About Chronolapse", wx.ITEM_NORMAL)
        self.aboutmenu.AppendItem(self.aboutmenuitem)
        self.chronoframe_menubar.Append(self.aboutmenu, "About")
        self.SetMenuBar(self.chronoframe_menubar)
        # Menu Bar end
        self.label_2 = wx.StaticText(self.notebook_1_capturepane, -1, "Time Between Captures:")
        self.frequencytext = wx.TextCtrl(self.notebook_1_capturepane, -1, "60")
        self.label_35 = wx.StaticText(self.notebook_1_capturepane, -1, "")
        self.screenshotcheck = wx.CheckBox(self.notebook_1_capturepane, -1, "Screenshots")
        self.screenshotconfigurebutton = wx.Button(self.notebook_1_capturepane, -1, "Configure")
        self.label_35_copy = wx.StaticText(self.notebook_1_capturepane, -1, "")
        self.webcamcheck = wx.CheckBox(self.notebook_1_capturepane, -1, "Webcam")
        self.configurewebcambutton = wx.Button(self.notebook_1_capturepane, -1, "Configure")
        self.label_35_copy_1 = wx.StaticText(self.notebook_1_capturepane, -1, "")
        self.startbutton = wx.Button(self.notebook_1_capturepane, -1, "Start Capture")
        self.registerhotkeybutton = wx.Button(self.notebook_1_capturepane, -1, "Register Hotkey")
        self.forcecapturebutton = wx.Button(self.notebook_1_capturepane, -1, "Force Capture")
        self.label_3 = wx.StaticText(self.notebook_1_capturepane, -1, "Frames")
        self.forcecaptureframestext = wx.TextCtrl(self.notebook_1_capturepane, -1, "1")
        self.hotkeytext = wx.TextCtrl(self.notebook_1_capturepane, -1, "", style=wx.TE_READONLY)
        self.label_1 = wx.StaticText(self.notebook_1_capturepane, -1, "Annotate:")
        self.annotatetext = wx.TextCtrl(self.notebook_1_capturepane, -1, "", style=wx.TE_MULTILINE|wx.TE_RICH2|wx.TE_LINEWRAP|wx.TE_WORDWRAP)
        self.annotatebutton = wx.Button(self.notebook_1_capturepane, -1, "Add Annotation")
        self.progresspanel = ProgressPanel(self.notebook_1_capturepane, -1)
        self.label_28 = wx.StaticText(self.notebook_1_schedulepane, -1, "Start Time:")
        self.startdate = wx.DatePickerCtrl(self.notebook_1_schedulepane, -1, size=(120,-1), style= wx.DP_DROPDOWN | wx.DP_SHOWCENTURY)
        self.starttime = masked.TimeCtrl(self.notebook_1_schedulepane, -1, name='starttime', fmt24hr=True)
        self.label_34 = wx.StaticText(self.notebook_1_schedulepane, -1, "End Time:")
        self.enddate = wx.DatePickerCtrl(self.notebook_1_schedulepane, -1, size=(120,-1), style= wx.DP_DROPDOWN | wx.DP_SHOWCENTURY)
        self.endtime = masked.TimeCtrl(self.notebook_1_schedulepane, -1, name='endtime', fmt24hr=True)
        self.activateschedulecheck = wx.CheckBox(self.notebook_1_schedulepane, -1, "Activate Schedule")
        self.label_29 = wx.StaticText(self.notebook_1_resizepane, -1, "Source Folder:")
        self.resizesourcetext = wx.TextCtrl(self.notebook_1_resizepane, -1, "")
        self.resizesourcebrowsebutton = wx.Button(self.notebook_1_resizepane, -1, "...")
        self.label_30 = wx.StaticText(self.notebook_1_resizepane, -1, "Output Folder:")
        self.resizeoutputtext = wx.TextCtrl(self.notebook_1_resizepane, -1, "")
        self.resizeoutputbrowsebutton = wx.Button(self.notebook_1_resizepane, -1, "...")
        self.label_31 = wx.StaticText(self.notebook_1_resizepane, -1, "Width:")
        self.resizewidthtext = wx.TextCtrl(self.notebook_1_resizepane, -1, "")
        self.label_32 = wx.StaticText(self.notebook_1_resizepane, -1, "Height:")
        self.resizeheighttext = wx.TextCtrl(self.notebook_1_resizepane, -1, "")
        self.resizebutton = wx.Button(self.notebook_1_resizepane, -1, "Resize")
        self.label_33 = wx.StaticText(self.notebook_1_resizepane, -1, "Rotation:")
        self.rotatecombo = wx.ComboBox(self.notebook_1_resizepane, -1, choices=["0", "45", "90", "135", "180", "225", "270", "315"], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN)
        self.rotatebutton = wx.Button(self.notebook_1_resizepane, -1, "Rotate")
        self.label_16 = wx.StaticText(self.notebook_1_annotationpane, -1, "Image/Annotation Folder:")
        self.annotatesourcefoldertext = wx.TextCtrl(self.notebook_1_annotationpane, -1, "")
        self.annotatesourcefolderbrowse = wx.Button(self.notebook_1_annotationpane, -1, "...")
        self.label_17 = wx.StaticText(self.notebook_1_annotationpane, -1, "Output Folder:")
        self.annotateoutputfoldertext = wx.TextCtrl(self.notebook_1_annotationpane, -1, "")
        self.annotateoutputfolderbrowse = wx.Button(self.notebook_1_annotationpane, -1, "...")
        self.label_18 = wx.StaticText(self.notebook_1_annotationpane, -1, "Font:")
        self.fontSelectButton = wx.Button(self.notebook_1_annotationpane, -1, "Select Font")
        self.fontexampletext = wx.TextCtrl(self.notebook_1_annotationpane, -1, "Example Annotation Text", style=wx.TE_READONLY|wx.TE_RICH2)
        self.label_19 = wx.StaticText(self.notebook_1_annotationpane, -1, "Opacity:")
        self.annotateopacityslider = wx.Slider(self.notebook_1_annotationpane, -1, 100, 0, 100, style=wx.SL_HORIZONTAL|wx.SL_AUTOTICKS|wx.SL_LABELS)
        self.label_20 = wx.StaticText(self.notebook_1_annotationpane, -1, "Position:")
        self.annotatepositioncombo = wx.ComboBox(self.notebook_1_annotationpane, -1, choices=["Top", "Bottom"], style=wx.CB_DROPDOWN)
        self.label_27 = wx.StaticText(self.notebook_1_annotationpane, -1, "Drop Shadow:")
        self.dropshadowcheck = wx.CheckBox(self.notebook_1_annotationpane, -1, "")
        self.annotatetimedradio = wx.RadioButton(self.notebook_1_annotationpane, -1, "Timed", style=wx.RB_GROUP)
        self.label_21 = wx.StaticText(self.notebook_1_annotationpane, -1, "Duration:")
        self.annotatedurationtext = wx.TextCtrl(self.notebook_1_annotationpane, -1, "5.0")
        self.annotateconstantradio = wx.RadioButton(self.notebook_1_annotationpane, -1, "Constant")
        self.annotatefadeincheck = wx.CheckBox(self.notebook_1_annotationpane, -1, "Fade In")
        self.annotatefadeoutcheck = wx.CheckBox(self.notebook_1_annotationpane, -1, "Fade Out")
        self.annotatecreatebutton = wx.Button(self.notebook_1_annotationpane, -1, "Create Annotated Images")
        self.viewannotationcontentsbutton = wx.Button(self.notebook_1_annotationpane, -1, "View Annotation Content")
        self.label_4 = wx.StaticText(self.notebook_1_pippane, -1, "Main Image Folder:")
        self.pipmainimagefoldertext = wx.TextCtrl(self.notebook_1_pippane, -1, "")
        self.pipmainimagefolderbrowse = wx.Button(self.notebook_1_pippane, -1, "...")
        self.label_12 = wx.StaticText(self.notebook_1_pippane, -1, "PIP Image Folder:")
        self.pippipimagefoldertext = wx.TextCtrl(self.notebook_1_pippane, -1, "")
        self.pippipimagefolderbrowse = wx.Button(self.notebook_1_pippane, -1, "...")
        self.label_13 = wx.StaticText(self.notebook_1_pippane, -1, "Output Folder:")
        self.pipoutputimagefoldertext = wx.TextCtrl(self.notebook_1_pippane, -1, "")
        self.pipoutputimagefolderbrowse = wx.Button(self.notebook_1_pippane, -1, "...")
        self.label_14 = wx.StaticText(self.notebook_1_pippane, -1, "PIP Size:")
        self.pipsizecombo = wx.ComboBox(self.notebook_1_pippane, -1, choices=["Small", "Medium", "Large"], style=wx.CB_DROPDOWN)
        self.label_15 = wx.StaticText(self.notebook_1_pippane, -1, "PIP Position:")
        self.pippositioncombo = wx.ComboBox(self.notebook_1_pippane, -1, choices=["Top", "Top-Right", "Right", "Bottom-Right", "Bottom", "Bottom-Left", "Left", "Top-Left"], style=wx.CB_DROPDOWN)
        self.pipignoreunmatchedcheck = wx.CheckBox(self.notebook_1_pippane, -1, "Ignore un-matched images")
        self.pipcreatebutton = wx.Button(self.notebook_1_pippane, -1, "Create PIP")
        self.label_22 = wx.StaticText(self.notebook_1_videopane, -1, "Source Images:")
        self.videosourcetext = wx.TextCtrl(self.notebook_1_videopane, -1, "")
        self.videosourcebrowse = wx.Button(self.notebook_1_videopane, -1, "...")
        self.label_23 = wx.StaticText(self.notebook_1_videopane, -1, "Destination Folder:")
        self.videodestinationtext = wx.TextCtrl(self.notebook_1_videopane, -1, "")
        self.videodestinationbrowse = wx.Button(self.notebook_1_videopane, -1, "...")
        self.label_26 = wx.StaticText(self.notebook_1_videopane, -1, "MEncoder Path:")
        self.mencoderpathtext = wx.TextCtrl(self.notebook_1_videopane, -1, "")
        self.mencoderpathbrowse = wx.Button(self.notebook_1_videopane, -1, "...")
        self.label_25 = wx.StaticText(self.notebook_1_videopane, -1, "Video Codec:")
        self.videocodeccombo = wx.ComboBox(self.notebook_1_videopane, -1, choices=["mpeg4", "mpeg2video", "wmv1", "wmv2"], style=wx.CB_DROPDOWN)
        self.randomname = wx.StaticText(self.notebook_1_videopane, -1, "Frame Rate:")
        self.videoframeratetext = wx.TextCtrl(self.notebook_1_videopane, -1, "25")
        self.movielengthlabel = wx.StaticText(self.notebook_1_videopane, -1, "Estimated Movie Length: 0 m 0 s")
        self.videorecalculatebutton = wx.Button(self.notebook_1_videopane, -1, "ReCalculate Estimate")
        self.videocreatebutton = wx.Button(self.notebook_1_videopane, -1, "Create Video")
        self.label_22_copy = wx.StaticText(self.notebook_1_audiopane, -1, "Video Source:")
        self.audiosourcevideotext = wx.TextCtrl(self.notebook_1_audiopane, -1, "")
        self.audiosourcevideobrowse = wx.Button(self.notebook_1_audiopane, -1, "...")
        self.label_23_copy = wx.StaticText(self.notebook_1_audiopane, -1, "Audio Source:")
        self.audiosourcetext = wx.TextCtrl(self.notebook_1_audiopane, -1, "")
        self.audiosourcebrowse = wx.Button(self.notebook_1_audiopane, -1, "...")
        self.label_26_copy = wx.StaticText(self.notebook_1_audiopane, -1, "Output Folder:")
        self.audiooutputfoldertext = wx.TextCtrl(self.notebook_1_audiopane, -1, "")
        self.audiooutputfolderbrowse = wx.Button(self.notebook_1_audiopane, -1, "...")
        self.createaudiobutton = wx.Button(self.notebook_1_audiopane, -1, "Add Audio")
        self.label_39 = wx.StaticText(self.notebook_1_convertpane, -1, "Chronolapse can convert captured filenames from the default timestamp filenames\nto sequential integers for use in other encoding software besides MEncoder.")
        self.label_23_copy_copy = wx.StaticText(self.notebook_1_convertpane, -1, "Source Folder:")
        self.convertsourcetext = wx.TextCtrl(self.notebook_1_convertpane, -1, "")
        self.convertsourcebrowse = wx.Button(self.notebook_1_convertpane, -1, "...")
        self.label_26_copy_copy = wx.StaticText(self.notebook_1_convertpane, -1, "Output Folder:")
        self.convertoutputtext = wx.TextCtrl(self.notebook_1_convertpane, -1, "")
        self.convertoutputbrowse = wx.Button(self.notebook_1_convertpane, -1, "...")
        self.convertfilesbutton = wx.Button(self.notebook_1_convertpane, -1, "Convert Files")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.instructionsMenuClicked, self.instructionsmenuitem)
        self.Bind(wx.EVT_MENU, self.aboutMenuClicked, self.aboutmenuitem)
        self.Bind(wx.EVT_BUTTON, self.screenshotConfigurePressed, self.screenshotconfigurebutton)
        self.Bind(wx.EVT_BUTTON, self.webcamConfigurePressed, self.configurewebcambutton)
        self.Bind(wx.EVT_BUTTON, self.startCapturePressed, self.startbutton)
        self.Bind(wx.EVT_BUTTON, self.registerHotkey, self.registerhotkeybutton)
        self.Bind(wx.EVT_BUTTON, self.forceCapturePressed, self.forcecapturebutton)
        self.Bind(wx.EVT_TEXT, self.hotkeyTextEntered, self.hotkeytext)
        self.Bind(wx.EVT_BUTTON, self.addAnnotationPressed, self.annotatebutton)
        self.Bind(wx.EVT_CHECKBOX, self.activateScheduleCheck, self.activateschedulecheck)
        self.Bind(wx.EVT_BUTTON, self.resizeSourceBrowsePressed, self.resizesourcebrowsebutton)
        self.Bind(wx.EVT_BUTTON, self.resizeOutputBrowsePressed, self.resizeoutputbrowsebutton)
        self.Bind(wx.EVT_BUTTON, self.resizePressed, self.resizebutton)
        self.Bind(wx.EVT_BUTTON, self.rotatePressed, self.rotatebutton)
        self.Bind(wx.EVT_BUTTON, self.annotationSourceBrowsePressed, self.annotatesourcefolderbrowse)
        self.Bind(wx.EVT_BUTTON, self.annotationOutputBrowsePressed, self.annotateoutputfolderbrowse)
        self.Bind(wx.EVT_BUTTON, self.fontSelectPressed, self.fontSelectButton)
        self.Bind(wx.EVT_BUTTON, self.createAnnotationPressed, self.annotatecreatebutton)
        self.Bind(wx.EVT_BUTTON, self.viewAnnotationContentPressed, self.viewannotationcontentsbutton)
        self.Bind(wx.EVT_BUTTON, self.pipMainImageBrowsePressed, self.pipmainimagefolderbrowse)
        self.Bind(wx.EVT_BUTTON, self.pipPipImageBrowsePressed, self.pippipimagefolderbrowse)
        self.Bind(wx.EVT_BUTTON, self.pipOutputBrowsePressed, self.pipoutputimagefolderbrowse)
        self.Bind(wx.EVT_BUTTON, self.createPipPressed, self.pipcreatebutton)
        self.Bind(wx.EVT_BUTTON, self.videoSourceBrowsePressed, self.videosourcebrowse)
        self.Bind(wx.EVT_BUTTON, self.videoDestinationBrowsePressed, self.videodestinationbrowse)
        self.Bind(wx.EVT_BUTTON, self.mencoderPathBrowsePressed, self.mencoderpathbrowse)
        self.Bind(wx.EVT_BUTTON, self.videoRecalculatePressed, self.videorecalculatebutton)
        self.Bind(wx.EVT_BUTTON, self.createVideoPressed, self.videocreatebutton)
        self.Bind(wx.EVT_BUTTON, self.audioSourceVideoBrowsePressed, self.audiosourcevideobrowse)
        self.Bind(wx.EVT_BUTTON, self.audioSourceBrowsePressed, self.audiosourcebrowse)
        self.Bind(wx.EVT_BUTTON, self.audioOutputFolderBrowsePressed, self.audiooutputfolderbrowse)
        self.Bind(wx.EVT_BUTTON, self.createAudioPressed, self.createaudiobutton)
        self.Bind(wx.EVT_BUTTON, self.convertSourceBrowsePressed, self.convertsourcebrowse)
        self.Bind(wx.EVT_BUTTON, self.convertOutputBrowsePressed, self.convertoutputbrowse)
        self.Bind(wx.EVT_BUTTON, self.convertFilesPressed, self.convertfilesbutton)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: chronoFrame.__set_properties
        self.SetTitle("ChronoLapse by Keeyai")
        self.SetSize((450, 400))
        self.frequencytext.SetToolTipString("The number of seconds in between captures. Set to 0 for no automatic capturing.")
        self.screenshotcheck.SetToolTipString("Check this to capture screenshots")
        self.screenshotcheck.SetValue(1)
        self.screenshotconfigurebutton.SetToolTipString("Click to configure screenshot captures")
        self.webcamcheck.SetToolTipString("Check to enable webcam captures")
        self.webcamcheck.SetValue(1)
        self.startbutton.SetToolTipString("Click to start/stop capturing")
        self.forcecapturebutton.SetToolTipString("Click to force CL to capture right now. Use for important frames or for creating stop motions.")
        self.forcecaptureframestext.SetMinSize((40, -1))
        self.forcecaptureframestext.SetToolTipString("Number of frames to add for forced captures. All frames will be identical.")
        self.hotkeytext.SetMinSize((120, -1))
        self.hotkeytext.SetToolTipString("Press any key combination here to set a 'hotkey'. Anytime you use this key combination, Chronolapse will record single frame.")
        self.annotatetext.SetMinSize((-1, 50))
        self.annotatetext.SetToolTipString("Use this space to annotate your videos/pictures")
        self.annotatebutton.SetToolTipString("Click to set the annotation")
        self.activateschedulecheck.SetToolTipString("Check this to have Chronolapse schedule a capture between the two times")
        self.resizesourcetext.SetMinSize((200, -1))
        self.resizesourcetext.SetToolTipString("The folder containing the images you want to resize")
        self.resizesourcebrowsebutton.SetMinSize((20, -1))
        self.resizeoutputtext.SetMinSize((200, -1))
        self.resizeoutputtext.SetToolTipString("The folder your resized images will be saved in. If this is the same as the source, the originals will be overwritten.")
        self.resizeoutputbrowsebutton.SetMinSize((20, -1))
        self.resizewidthtext.SetToolTipString("The width of the resulting images, in pixels")
        self.resizeheighttext.SetToolTipString("The height of the resulting images, in pixels")
        self.resizebutton.SetToolTipString("Press to begin resizing images")
        self.label_33.SetToolTipString("Set the desired angle in degrees to rotate the images ")
        self.rotatecombo.SetToolTipString("The angle in degrees")
        self.rotatecombo.SetSelection(0)
        self.rotatebutton.SetToolTipString("Press to begin rotating images")
        self.annotatesourcefoldertext.SetMinSize((200, -1))
        self.annotatesourcefolderbrowse.SetMinSize((20, -1))
        self.annotateoutputfoldertext.SetMinSize((200, -1))
        self.annotateoutputfolderbrowse.SetMinSize((20, -1))
        self.fontexampletext.SetMinSize((200, -1))
        self.fontexampletext.SetBackgroundColour(wx.Colour(237, 255, 170))
        self.annotateopacityslider.SetMinSize((300, -1))
        self.annotatepositioncombo.SetSelection(0)
        self.label_27.SetToolTipString("Check this to add a black drop shadow to your annotations")
        self.dropshadowcheck.SetToolTipString("Check this to add a black drop shadow to your annotations")
        self.annotatetimedradio.SetToolTipString("Check this to have annotations display for a set period of time, then disappear")
        self.annotatetimedradio.SetValue(1)
        self.annotatedurationtext.SetToolTipString("Duration, in seconds, that annotations should be visible")
        self.annotateconstantradio.SetToolTipString("Check this to have annotations visible for as long as they are set in the annotiations box")
        self.annotatefadeincheck.SetToolTipString("Check this to have annotations fade in when set to timed")
        self.annotatefadeincheck.SetValue(1)
        self.annotatefadeoutcheck.SetToolTipString("Check this to have annotations fade out when set to timed")
        self.annotatefadeoutcheck.SetValue(1)
        self.annotatecreatebutton.SetToolTipString("Click to create annotated images")
        self.viewannotationcontentsbutton.SetToolTipString("Click to view the contents of the annotation file in the source folder above")
        self.pipmainimagefoldertext.SetMinSize((200, -1))
        self.pipmainimagefolderbrowse.SetMinSize((20, -1))
        self.pippipimagefoldertext.SetMinSize((200, -1))
        self.pippipimagefolderbrowse.SetMinSize((20, -1))
        self.pipoutputimagefoldertext.SetMinSize((200, -1))
        self.pipoutputimagefolderbrowse.SetMinSize((20, -1))
        self.pipsizecombo.SetToolTipString("Select the size of the smaller image")
        self.pipsizecombo.SetSelection(0)
        self.pippositioncombo.SetToolTipString("Select the position of the smaller image")
        self.pippositioncombo.SetSelection(1)
        self.pipignoreunmatchedcheck.SetToolTipString("Check to ignore image names that are in one folder but not the other")
        self.pipignoreunmatchedcheck.Hide()
        self.pipignoreunmatchedcheck.SetValue(1)
        self.pipcreatebutton.SetToolTipString("Create PIP")
        self.videosourcetext.SetMinSize((200, -1))
        self.videosourcebrowse.SetMinSize((20, -1))
        self.videodestinationtext.SetMinSize((200, -1))
        self.videodestinationbrowse.SetMinSize((20, -1))
        self.mencoderpathtext.SetMinSize((200, -1))
        self.mencoderpathtext.SetToolTipString("Set this to the MEncoder executable")
        self.mencoderpathbrowse.SetMinSize((20, -1))
        self.videocodeccombo.SetToolTipString("Select which codec to use when encoding your video")
        self.videocodeccombo.SetSelection(0)
        self.videoframeratetext.SetMinSize((25, -1))
        self.videoframeratetext.SetToolTipString("Set how many images per second you want to show in your movie")
        self.videorecalculatebutton.SetToolTipString("Click to re-calculate the movie length estimate")
        self.videocreatebutton.SetToolTipString("Create the Video")
        self.audiosourcevideotext.SetMinSize((200, -1))
        self.audiosourcevideobrowse.SetMinSize((20, -1))
        self.audiosourcetext.SetMinSize((200, -1))
        self.audiosourcebrowse.SetMinSize((20, -1))
        self.audiooutputfoldertext.SetMinSize((200, -1))
        self.audiooutputfoldertext.SetToolTipString("Set this to the folder where you want the finished video")
        self.audiooutputfolderbrowse.SetMinSize((20, -1))
        self.convertsourcetext.SetMinSize((200, -1))
        self.convertsourcebrowse.SetMinSize((20, -1))
        self.convertoutputtext.SetMinSize((200, -1))
        self.convertoutputtext.SetToolTipString("Set this to the folder where you want the finished video")
        self.convertoutputbrowse.SetMinSize((20, -1))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: chronoFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_33 = wx.FlexGridSizer(2, 1, 5, 0)
        grid_sizer_18_copy_copy_copy = wx.FlexGridSizer(4, 3, 0, 0)
        grid_sizer_29 = wx.GridSizer(2, 1, 0, 0)
        grid_sizer_18_copy_copy = wx.FlexGridSizer(4, 3, 0, 0)
        grid_sizer_18 = wx.FlexGridSizer(4, 1, 0, 0)
        grid_sizer_19 = wx.FlexGridSizer(1, 1, 0, 0)
        grid_sizer_23 = wx.FlexGridSizer(5, 2, 0, 5)
        grid_sizer_18_copy = wx.FlexGridSizer(3, 3, 0, 0)
        grid_sizer_5 = wx.FlexGridSizer(4, 1, 0, 0)
        grid_sizer_13 = wx.FlexGridSizer(2, 2, 0, 0)
        grid_sizer_12 = wx.FlexGridSizer(3, 3, 0, 0)
        grid_sizer_14 = wx.FlexGridSizer(4, 1, 0, 0)
        grid_sizer_20 = wx.FlexGridSizer(1, 2, 10, 0)
        grid_sizer_17 = wx.FlexGridSizer(3, 3, 0, 0)
        grid_sizer_16 = wx.FlexGridSizer(5, 2, 0, 0)
        grid_sizer_30 = wx.FlexGridSizer(1, 3, 0, 0)
        grid_sizer_22 = wx.FlexGridSizer(1, 2, 0, 5)
        grid_sizer_15 = wx.FlexGridSizer(2, 3, 0, 5)
        grid_sizer_25 = wx.FlexGridSizer(6, 1, 0, 0)
        grid_sizer_28 = wx.GridSizer(1, 2, 0, 0)
        grid_sizer_27 = wx.FlexGridSizer(2, 4, 0, 5)
        grid_sizer_26 = wx.FlexGridSizer(2, 3, 0, 0)
        grid_sizer_31 = wx.FlexGridSizer(3, 3, 0, 0)
        grid_sizer_1 = wx.FlexGridSizer(3, 1, 0, 0)
        grid_sizer_3 = wx.FlexGridSizer(3, 1, 0, 0)
        grid_sizer_4 = wx.FlexGridSizer(5, 3, 0, 0)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_4.Add(self.label_2, 0, 0, 0)
        grid_sizer_4.Add(self.frequencytext, 0, 0, 0)
        grid_sizer_4.Add(self.label_35, 0, 0, 0)
        grid_sizer_4.Add(self.screenshotcheck, 0, 0, 0)
        grid_sizer_4.Add(self.screenshotconfigurebutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_4.Add(self.label_35_copy, 0, 0, 0)
        grid_sizer_4.Add(self.webcamcheck, 0, 0, 0)
        grid_sizer_4.Add(self.configurewebcambutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_4.Add(self.label_35_copy_1, 0, 0, 0)
        grid_sizer_4.Add(self.startbutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_4.Add((20, 20), 0, 0, 0)
        grid_sizer_4.Add(self.registerhotkeybutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_4.Add(self.forcecapturebutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_2.Add(self.label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.forcecaptureframestext, 0, 0, 0)
        grid_sizer_4.Add(sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_4.Add(self.hotkeytext, 0, 0, 0)
        grid_sizer_1.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.label_1, 0, 0, 0)
        grid_sizer_3.Add(self.annotatetext, 0, wx.EXPAND|wx.FIXED_MINSIZE, 0)
        grid_sizer_3.Add(self.annotatebutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_3.AddGrowableRow(1)
        grid_sizer_3.AddGrowableCol(0)
        grid_sizer_1.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.progresspanel, 1, wx.EXPAND, 0)
        self.notebook_1_capturepane.SetSizer(grid_sizer_1)
        grid_sizer_1.AddGrowableRow(1)
        grid_sizer_1.AddGrowableCol(0)
        grid_sizer_31.Add(self.label_28, 0, 0, 0)
        grid_sizer_31.Add(self.startdate, 1, wx.EXPAND, 0)
        grid_sizer_31.Add(self.starttime, 1, wx.EXPAND, 0)
        grid_sizer_31.Add(self.label_34, 0, 0, 0)
        grid_sizer_31.Add(self.enddate, 1, wx.EXPAND, 0)
        grid_sizer_31.Add(self.endtime, 1, wx.EXPAND, 0)
        grid_sizer_31.Add((20, 20), 0, 0, 0)
        grid_sizer_31.Add(self.activateschedulecheck, 0, 0, 0)
        grid_sizer_31.Add((20, 20), 0, 0, 0)
        self.notebook_1_schedulepane.SetSizer(grid_sizer_31)
        grid_sizer_26.Add(self.label_29, 0, 0, 0)
        grid_sizer_26.Add(self.resizesourcetext, 0, 0, 0)
        grid_sizer_26.Add(self.resizesourcebrowsebutton, 0, 0, 0)
        grid_sizer_26.Add(self.label_30, 0, 0, 0)
        grid_sizer_26.Add(self.resizeoutputtext, 0, 0, 0)
        grid_sizer_26.Add(self.resizeoutputbrowsebutton, 0, 0, 0)
        grid_sizer_25.Add(grid_sizer_26, 1, wx.EXPAND, 0)
        grid_sizer_27.Add(self.label_31, 0, 0, 0)
        grid_sizer_27.Add(self.resizewidthtext, 0, 0, 0)
        grid_sizer_27.Add(self.label_32, 0, 0, 0)
        grid_sizer_27.Add(self.resizeheighttext, 0, 0, 0)
        grid_sizer_25.Add(grid_sizer_27, 1, wx.EXPAND, 0)
        grid_sizer_25.Add(self.resizebutton, 0, wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_25.Add((20, 60), 0, 0, 0)
        grid_sizer_28.Add(self.label_33, 0, 0, 0)
        grid_sizer_28.Add(self.rotatecombo, 0, 0, 0)
        grid_sizer_25.Add(grid_sizer_28, 1, wx.EXPAND, 0)
        grid_sizer_25.Add(self.rotatebutton, 0, wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.notebook_1_resizepane.SetSizer(grid_sizer_25)
        grid_sizer_25.AddGrowableCol(0)
        grid_sizer_15.Add(self.label_16, 0, 0, 0)
        grid_sizer_15.Add(self.annotatesourcefoldertext, 0, 0, 0)
        grid_sizer_15.Add(self.annotatesourcefolderbrowse, 0, 0, 0)
        grid_sizer_15.Add(self.label_17, 0, 0, 0)
        grid_sizer_15.Add(self.annotateoutputfoldertext, 0, 0, 0)
        grid_sizer_15.Add(self.annotateoutputfolderbrowse, 0, 0, 0)
        grid_sizer_14.Add(grid_sizer_15, 1, wx.EXPAND, 0)
        grid_sizer_16.Add(self.label_18, 0, 0, 0)
        grid_sizer_22.Add(self.fontSelectButton, 0, 0, 0)
        grid_sizer_22.Add(self.fontexampletext, 0, 0, 0)
        grid_sizer_16.Add(grid_sizer_22, 1, wx.EXPAND, 0)
        grid_sizer_16.Add(self.label_19, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_16.Add(self.annotateopacityslider, 0, wx.EXPAND, 0)
        grid_sizer_16.Add(self.label_20, 0, 0, 0)
        grid_sizer_30.Add(self.annotatepositioncombo, 0, 0, 0)
        grid_sizer_30.Add(self.label_27, 0, 0, 0)
        grid_sizer_30.Add(self.dropshadowcheck, 0, 0, 0)
        grid_sizer_16.Add(grid_sizer_30, 1, wx.EXPAND, 0)
        grid_sizer_16.AddGrowableCol(1)
        grid_sizer_14.Add(grid_sizer_16, 1, wx.EXPAND, 0)
        grid_sizer_17.Add(self.annotatetimedradio, 0, 0, 0)
        grid_sizer_17.Add(self.label_21, 0, 0, 0)
        grid_sizer_17.Add(self.annotatedurationtext, 0, 0, 0)
        grid_sizer_17.Add(self.annotateconstantradio, 0, 0, 0)
        grid_sizer_17.Add((20, 20), 0, 0, 0)
        grid_sizer_17.Add((20, 20), 0, 0, 0)
        grid_sizer_17.Add(self.annotatefadeincheck, 0, 0, 0)
        grid_sizer_17.Add(self.annotatefadeoutcheck, 0, 0, 0)
        grid_sizer_17.Add((20, 20), 0, 0, 0)
        grid_sizer_14.Add(grid_sizer_17, 1, wx.EXPAND, 0)
        grid_sizer_20.Add(self.annotatecreatebutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_20.Add(self.viewannotationcontentsbutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_20.AddGrowableRow(0)
        grid_sizer_20.AddGrowableCol(0)
        grid_sizer_20.AddGrowableCol(1)
        grid_sizer_14.Add(grid_sizer_20, 1, wx.EXPAND, 0)
        self.notebook_1_annotationpane.SetSizer(grid_sizer_14)
        grid_sizer_14.AddGrowableCol(0)
        grid_sizer_12.Add(self.label_4, 0, 0, 0)
        grid_sizer_12.Add(self.pipmainimagefoldertext, 0, 0, 0)
        grid_sizer_12.Add(self.pipmainimagefolderbrowse, 0, 0, 0)
        grid_sizer_12.Add(self.label_12, 0, 0, 0)
        grid_sizer_12.Add(self.pippipimagefoldertext, 0, 0, 0)
        grid_sizer_12.Add(self.pippipimagefolderbrowse, 0, 0, 0)
        grid_sizer_12.Add(self.label_13, 0, 0, 0)
        grid_sizer_12.Add(self.pipoutputimagefoldertext, 0, 0, 0)
        grid_sizer_12.Add(self.pipoutputimagefolderbrowse, 0, 0, 0)
        grid_sizer_5.Add(grid_sizer_12, 1, wx.EXPAND, 0)
        grid_sizer_13.Add(self.label_14, 0, 0, 0)
        grid_sizer_13.Add(self.pipsizecombo, 0, 0, 0)
        grid_sizer_13.Add(self.label_15, 0, 0, 0)
        grid_sizer_13.Add(self.pippositioncombo, 0, 0, 0)
        grid_sizer_5.Add(grid_sizer_13, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(self.pipignoreunmatchedcheck, 0, 0, 0)
        grid_sizer_5.Add(self.pipcreatebutton, 0, wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.notebook_1_pippane.SetSizer(grid_sizer_5)
        grid_sizer_5.AddGrowableRow(3)
        grid_sizer_5.AddGrowableCol(0)
        grid_sizer_18_copy.Add(self.label_22, 0, 0, 0)
        grid_sizer_18_copy.Add(self.videosourcetext, 0, 0, 0)
        grid_sizer_18_copy.Add(self.videosourcebrowse, 0, 0, 0)
        grid_sizer_18_copy.Add(self.label_23, 0, 0, 0)
        grid_sizer_18_copy.Add(self.videodestinationtext, 0, 0, 0)
        grid_sizer_18_copy.Add(self.videodestinationbrowse, 0, 0, 0)
        grid_sizer_18_copy.Add(self.label_26, 0, 0, 0)
        grid_sizer_18_copy.Add(self.mencoderpathtext, 0, 0, 0)
        grid_sizer_18_copy.Add(self.mencoderpathbrowse, 0, 0, 0)
        grid_sizer_18_copy.AddGrowableRow(2)
        grid_sizer_18.Add(grid_sizer_18_copy, 1, wx.EXPAND, 0)
        grid_sizer_23.Add(self.label_25, 0, 0, 0)
        grid_sizer_23.Add(self.videocodeccombo, 0, 0, 0)
        grid_sizer_23.Add(self.randomname, 0, 0, 0)
        grid_sizer_23.Add(self.videoframeratetext, 0, 0, 0)
        grid_sizer_23.Add(self.movielengthlabel, 0, 0, 0)
        grid_sizer_23.Add(self.videorecalculatebutton, 0, 0, 0)
        grid_sizer_23.AddGrowableCol(1)
        grid_sizer_18.Add(grid_sizer_23, 1, wx.EXPAND, 0)
        grid_sizer_19.Add(self.videocreatebutton, 0, wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_19.AddGrowableRow(0)
        grid_sizer_19.AddGrowableCol(0)
        grid_sizer_18.Add(grid_sizer_19, 1, wx.EXPAND, 0)
        self.notebook_1_videopane.SetSizer(grid_sizer_18)
        grid_sizer_18.AddGrowableRow(3)
        grid_sizer_18.AddGrowableCol(0)
        grid_sizer_18_copy_copy.Add(self.label_22_copy, 0, 0, 0)
        grid_sizer_18_copy_copy.Add(self.audiosourcevideotext, 0, 0, 0)
        grid_sizer_18_copy_copy.Add(self.audiosourcevideobrowse, 0, 0, 0)
        grid_sizer_18_copy_copy.Add(self.label_23_copy, 0, 0, 0)
        grid_sizer_18_copy_copy.Add(self.audiosourcetext, 0, 0, 0)
        grid_sizer_18_copy_copy.Add(self.audiosourcebrowse, 0, 0, 0)
        grid_sizer_18_copy_copy.Add(self.label_26_copy, 0, 0, 0)
        grid_sizer_18_copy_copy.Add(self.audiooutputfoldertext, 0, 0, 0)
        grid_sizer_18_copy_copy.Add(self.audiooutputfolderbrowse, 0, 0, 0)
        grid_sizer_18_copy_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_18_copy_copy.Add(self.createaudiobutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_18_copy_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_18_copy_copy.AddGrowableRow(2)
        grid_sizer_29.Add(grid_sizer_18_copy_copy, 1, wx.EXPAND, 0)
        self.notebook_1_audiopane.SetSizer(grid_sizer_29)
        grid_sizer_33.Add(self.label_39, 0, 0, 0)
        grid_sizer_18_copy_copy_copy.Add(self.label_23_copy_copy, 0, 0, 0)
        grid_sizer_18_copy_copy_copy.Add(self.convertsourcetext, 0, 0, 0)
        grid_sizer_18_copy_copy_copy.Add(self.convertsourcebrowse, 0, 0, 0)
        grid_sizer_18_copy_copy_copy.Add(self.label_26_copy_copy, 0, 0, 0)
        grid_sizer_18_copy_copy_copy.Add(self.convertoutputtext, 0, 0, 0)
        grid_sizer_18_copy_copy_copy.Add(self.convertoutputbrowse, 0, 0, 0)
        grid_sizer_18_copy_copy_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_18_copy_copy_copy.Add(self.convertfilesbutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_18_copy_copy_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_18_copy_copy_copy.AddGrowableRow(2)
        grid_sizer_33.Add(grid_sizer_18_copy_copy_copy, 1, wx.EXPAND, 0)
        self.notebook_1_convertpane.SetSizer(grid_sizer_33)
        grid_sizer_33.AddGrowableRow(1)
        grid_sizer_33.AddGrowableCol(0)
        self.notebook_1.AddPage(self.notebook_1_capturepane, "Capture")
        self.notebook_1.AddPage(self.notebook_1_schedulepane, "Schedule")
        self.notebook_1.AddPage(self.notebook_1_resizepane, "Adjust")
        self.notebook_1.AddPage(self.notebook_1_annotationpane, "Annotate")
        self.notebook_1.AddPage(self.notebook_1_pippane, "PIP")
        self.notebook_1.AddPage(self.notebook_1_videopane, "Video")
        self.notebook_1.AddPage(self.notebook_1_audiopane, "Audio")
        self.notebook_1.AddPage(self.notebook_1_convertpane, "Rename")
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def instructionsMenuClicked(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `instructionsMenuClicked' not implemented!"
        event.Skip()

    def aboutMenuClicked(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `aboutMenuClicked' not implemented!"
        event.Skip()

    def screenshotConfigurePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `screenshotConfigurePressed' not implemented!"
        event.Skip()

    def webcamConfigurePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `webcamConfigurePressed' not implemented!"
        event.Skip()

    def startCapturePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `startCapturePressed' not implemented!"
        event.Skip()

    def registerHotkey(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `registerHotkey' not implemented!"
        event.Skip()

    def forceCapturePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `forceCapturePressed' not implemented!"
        event.Skip()

    def hotkeyTextEntered(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `hotkeyTextEntered' not implemented!"
        event.Skip()

    def addAnnotationPressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `addAnnotationPressed' not implemented!"
        event.Skip()

    def activateScheduleCheck(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `activateScheduleCheck' not implemented!"
        event.Skip()

    def resizeSourceBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `resizeSourceBrowsePressed' not implemented!"
        event.Skip()

    def resizeOutputBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `resizeOutputBrowsePressed' not implemented!"
        event.Skip()

    def resizePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `resizePressed' not implemented!"
        event.Skip()

    def rotatePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `rotatePressed' not implemented!"
        event.Skip()

    def annotationSourceBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `annotationSourceBrowsePressed' not implemented!"
        event.Skip()

    def annotationOutputBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `annotationOutputBrowsePressed' not implemented!"
        event.Skip()

    def fontSelectPressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `fontSelectPressed' not implemented!"
        event.Skip()

    def createAnnotationPressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `createAnnotationPressed' not implemented!"
        event.Skip()

    def viewAnnotationContentPressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `viewAnnotationContentPressed' not implemented!"
        event.Skip()

    def pipMainImageBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `pipMainImageBrowsePressed' not implemented!"
        event.Skip()

    def pipPipImageBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `pipPipImageBrowsePressed' not implemented!"
        event.Skip()

    def pipOutputBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `pipOutputBrowsePressed' not implemented!"
        event.Skip()

    def createPipPressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `createPipPressed' not implemented!"
        event.Skip()

    def videoSourceBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `videoSourceBrowsePressed' not implemented!"
        event.Skip()

    def videoDestinationBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `videoDestinationBrowsePressed' not implemented!"
        event.Skip()

    def mencoderPathBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `mencoderPathBrowsePressed' not implemented!"
        event.Skip()

    def videoRecalculatePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `videoRecalculatePressed' not implemented!"
        event.Skip()

    def createVideoPressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `createVideoPressed' not implemented!"
        event.Skip()

    def audioSourceVideoBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `audioSourceVideoBrowsePressed' not implemented!"
        event.Skip()

    def audioSourceBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `audioSourceBrowsePressed' not implemented!"
        event.Skip()

    def audioOutputFolderBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `audioOutputFolderBrowsePressed' not implemented!"
        event.Skip()

    def createAudioPressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `createAudioPressed' not implemented!"
        event.Skip()

    def convertSourceBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `convertSourceBrowsePressed' not implemented!"
        event.Skip()

    def convertOutputBrowsePressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `convertOutputBrowsePressed' not implemented!"
        event.Skip()

    def convertFilesPressed(self, event): # wxGlade: chronoFrame.<event_handler>
        print "Event handler `convertFilesPressed' not implemented!"
        event.Skip()

# end of class chronoFrame


class screenshotConfigDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: screenshotConfigDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.dualmonitorscheck = wx.CheckBox(self, -1, "Capture Dual Monitors")
        self.timestampcheck = wx.CheckBox(self, -1, "Show Timestamp")
        self.subsectioncheck = wx.CheckBox(self, -1, "Subsection")
        self.colourpickerlabel = wx.StaticText(self, -1, "Timestamp Colour:")
        self.colourpicker = wx.ColourPickerCtrl(self, -1)
        self.label36 = wx.StaticText(self, -1, "Top:")
        self.subsectiontop = wx.TextCtrl(self, -1, "")
        self.label_36 = wx.StaticText(self, -1, "Left:")
        self.subsectionleft = wx.TextCtrl(self, -1, "")
        self.label_37 = wx.StaticText(self, -1, "Width:")
        self.subsectionwidth = wx.TextCtrl(self, -1, "")
        self.label_38 = wx.StaticText(self, -1, "Height:")
        self.subsectionheight = wx.TextCtrl(self, -1, "")
        self.label_5 = wx.StaticText(self, -1, "File Prefix:")
        self.screenshotprefixtext = wx.TextCtrl(self, -1, "screen_")
        self.label_6 = wx.StaticText(self, -1, "Save Folder:")
        self.screenshotsavefoldertext = wx.TextCtrl(self, -1, "")
        self.screenshotsavefolderbrowse = wx.Button(self, -1, "...")
        self.label_7 = wx.StaticText(self, -1, "File Format:")
        self.screenshotformatcombo = wx.ComboBox(self, -1, choices=["jpg", "png", "gif"], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN)
        self.screenshotconfigsave = wx.Button(self, wx.ID_OK, "")
        self.screenshotconfigcancel = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.screenshotSaveFolderBrowse, self.screenshotsavefolderbrowse)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: screenshotConfigDialog.__set_properties
        self.SetTitle("Configure Screenshots")
        self.dualmonitorscheck.SetToolTipString("Check to capture images from 2 monitors")
        self.timestampcheck.SetToolTipString("Check to have CL write a timestamp on each capture")
        self.timestampcheck.SetValue(1)
        self.screenshotprefixtext.SetToolTipString("The file prefix every screenshot should start with")
        self.screenshotsavefoldertext.SetMinSize((250, -1))
        self.screenshotsavefolderbrowse.SetMinSize((20, -1))
        self.screenshotsavefolderbrowse.SetToolTipString("Click to browse directories")
        self.screenshotformatcombo.SetToolTipString("Select the file format in which screen captures will be saved")
        self.screenshotformatcombo.SetSelection(0)
        self.screenshotconfigsave.SetToolTipString("Save this configuration")
        self.screenshotconfigcancel.SetToolTipString("Return to main program without saving")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: screenshotConfigDialog.__do_layout
        grid_sizer_2 = wx.FlexGridSizer(6, 1, 10, 0)
        grid_sizer_8 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_7 = wx.FlexGridSizer(3, 3, 0, 0)
        grid_sizer_32 = wx.FlexGridSizer(2, 4, 0, 0) #rows, cols
        grid_sizer_6 = wx.FlexGridSizer(2, 2, 0, 0)
        grid_sizer_colourpicker = wx.FlexGridSizer(1,2,0,0)
        grid_sizer_colourpicker.Add(self.colourpickerlabel, 0, 0, 0)
        grid_sizer_colourpicker.Add(self.colourpicker, 0, 0, 0)
        grid_sizer_6.Add(self.dualmonitorscheck, 0, 0, 0)
        grid_sizer_6.Add(self.timestampcheck, 0, 0, 0)
        grid_sizer_6.Add(self.subsectioncheck, 0, 0, 0)
        grid_sizer_6.Add(grid_sizer_colourpicker, 0, 0, 0)        
        grid_sizer_2.Add(grid_sizer_6, 1, wx.EXPAND, 0)
        grid_sizer_32.Add(self.label36, 0, 0, 0)
        grid_sizer_32.Add(self.subsectiontop, 0, 0, 0)
        grid_sizer_32.Add(self.label_36, 0, 0, 0)
        grid_sizer_32.Add(self.subsectionleft, 0, 0, 0)
        grid_sizer_32.Add(self.label_37, 0, 0, 0)
        grid_sizer_32.Add(self.subsectionwidth, 0, 0, 0)
        grid_sizer_32.Add(self.label_38, 0, 0, 0)
        grid_sizer_32.Add(self.subsectionheight, 0, 0, 0)
        grid_sizer_2.Add(grid_sizer_32, 1, wx.EXPAND, 0)
        grid_sizer_7.Add(self.label_5, 0, 0, 0)
        grid_sizer_7.Add(self.screenshotprefixtext, 0, 0, 0)
        grid_sizer_7.Add((20, 20), 0, 0, 0)
        grid_sizer_7.Add(self.label_6, 0, 0, 0)
        grid_sizer_7.Add(self.screenshotsavefoldertext, 0, 0, 0)
        grid_sizer_7.Add(self.screenshotsavefolderbrowse, 0, 0, 0)
        grid_sizer_7.Add(self.label_7, 0, 0, 0)
        grid_sizer_7.Add(self.screenshotformatcombo, 0, 0, 0)
        grid_sizer_7.Add((20, 20), 0, 0, 0)
        grid_sizer_2.Add(grid_sizer_7, 1, wx.EXPAND, 0)
        grid_sizer_8.Add(self.screenshotconfigsave, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_8.Add(self.screenshotconfigcancel, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_8.AddGrowableCol(0)
        grid_sizer_8.AddGrowableCol(1)
        grid_sizer_2.Add(grid_sizer_8, 1, wx.EXPAND, 0)
        self.SetSizer(grid_sizer_2)
        grid_sizer_2.Fit(self)
        grid_sizer_2.AddGrowableCol(0)
        self.Layout()
        self.Centre()
        # end wxGlade

    def screenshotSaveFolderBrowse(self, event): # wxGlade: screenshotConfigDialog.<event_handler>
        print "Event handler `screenshotSaveFolderBrowse' not implemented!"
        event.Skip()

# end of class screenshotConfigDialog


class webcamConfigDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: webcamConfigDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.testwebcambutton = wx.Button(self, -1, "Test Webcam")
        self.webcamtimestampcheck = wx.CheckBox(self, -1, "Show Timestamp")
        self.label_8 = wx.StaticText(self, -1, "Resolution:")
        self.webcamresolutioncombo = wx.ComboBox(self, -1, choices=["640, 480", "800, 600", "1024, 768", "1280, 1024"], style=wx.CB_DROPDOWN)
        self.label_9 = wx.StaticText(self, -1, "File Prefix:")
        self.webcamprefixtext = wx.TextCtrl(self, -1, "cam_")
        self.label_10 = wx.StaticText(self, -1, "Save Folder:")
        self.webcamsavefoldertext = wx.TextCtrl(self, -1, "")
        self.webcamsavefolderbrowse = wx.Button(self, -1, "...")
        self.label_11 = wx.StaticText(self, -1, "File Format:")
        self.webcamformatcombo = wx.ComboBox(self, -1, choices=["jpg", "png", "gif"], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN)
        self.webcamsavebutton = wx.Button(self, wx.ID_OK, "")
        self.webcamcancelbutton = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.testWebcamPressed, self.testwebcambutton)
        self.Bind(wx.EVT_BUTTON, self.webcamSaveFolderBrowse, self.webcamsavefolderbrowse)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: webcamConfigDialog.__set_properties
        self.SetTitle("Configure Webcam")
        self.testwebcambutton.SetToolTipString("Click to test your webcam")
        self.webcamtimestampcheck.SetToolTipString("Check to write a timestamp on each webcam capture")
        self.label_8.Hide()
        self.webcamresolutioncombo.Hide()
        self.webcamresolutioncombo.SetSelection(1)
        self.webcamsavefoldertext.SetMinSize((250, -1))
        self.webcamsavefolderbrowse.SetMinSize((20, -1))
        self.webcamformatcombo.SetToolTipString("Select the file format in which webcam captures will be saved")
        self.webcamformatcombo.SetSelection(0)
        self.webcamsavebutton.SetToolTipString("Save this configuration")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: webcamConfigDialog.__do_layout
        grid_sizer_9 = wx.FlexGridSizer(4, 1, 10, 0)
        grid_sizer_11 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_10 = wx.FlexGridSizer(4, 3, 0, 0)
        grid_sizer_9.Add(self.testwebcambutton, 0, 0, 0)
        grid_sizer_9.Add(self.webcamtimestampcheck, 0, 0, 0)
        grid_sizer_10.Add(self.label_8, 0, 0, 0)
        grid_sizer_10.Add(self.webcamresolutioncombo, 0, 0, 0)
        grid_sizer_10.Add((20, 20), 0, 0, 0)
        grid_sizer_10.Add(self.label_9, 0, 0, 0)
        grid_sizer_10.Add(self.webcamprefixtext, 0, 0, 0)
        grid_sizer_10.Add((20, 20), 0, 0, 0)
        grid_sizer_10.Add(self.label_10, 0, 0, 0)
        grid_sizer_10.Add(self.webcamsavefoldertext, 0, 0, 0)
        grid_sizer_10.Add(self.webcamsavefolderbrowse, 0, 0, 0)
        grid_sizer_10.Add(self.label_11, 0, 0, 0)
        grid_sizer_10.Add(self.webcamformatcombo, 0, 0, 0)
        grid_sizer_10.Add((20, 20), 0, 0, 0)
        grid_sizer_9.Add(grid_sizer_10, 1, wx.EXPAND, 0)
        grid_sizer_11.Add(self.webcamsavebutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_11.Add(self.webcamcancelbutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_11.AddGrowableCol(0)
        grid_sizer_11.AddGrowableCol(1)
        grid_sizer_9.Add(grid_sizer_11, 1, wx.EXPAND, 0)
        self.SetSizer(grid_sizer_9)
        grid_sizer_9.Fit(self)
        grid_sizer_9.AddGrowableCol(0)
        self.Layout()
        self.Centre()
        # end wxGlade

    def testWebcamPressed(self, event): # wxGlade: webcamConfigDialog.<event_handler>
        print "Event handler `testWebcamPressed' not implemented!"
        event.Skip()

    def webcamSaveFolderBrowse(self, event): # wxGlade: webcamConfigDialog.<event_handler>
        print "Event handler `webcamSaveFolderBrowse' not implemented!"
        event.Skip()

# end of class webcamConfigDialog


class webcamPreviewDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: webcamPreviewDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.panel_1 = wx.ScrolledWindow(self, -1, style=wx.TAB_TRAVERSAL)
        self.previewbitmap = wx.StaticBitmap(self.panel_1, -1, wx.NullBitmap)
        self.previewokbutton = wx.Button(self, wx.ID_OK, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: webcamPreviewDialog.__set_properties
        self.SetTitle("Webcam Preview")
        self.SetSize((500, 400))
        self.previewbitmap.SetMinSize((-1, -1))
        self.panel_1.SetScrollRate(10, 10)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: webcamPreviewDialog.__do_layout
        grid_sizer_24 = wx.FlexGridSizer(2, 1, 0, 0)
        sizer_3 = wx.FlexGridSizer(1, 1, 0, 0)
        sizer_3.Add(self.previewbitmap, 0, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_3)
        sizer_3.AddGrowableRow(0)
        sizer_3.AddGrowableCol(0)
        grid_sizer_24.Add(self.panel_1, 1, wx.EXPAND, 0)
        grid_sizer_24.Add(self.previewokbutton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.SetSizer(grid_sizer_24)
        grid_sizer_24.AddGrowableRow(0)
        grid_sizer_24.AddGrowableCol(0)
        self.Layout()
        # end wxGlade

# end of class webcamPreviewDialog


class annotationContentsDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: annotationContentsDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.annotationtext = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.button_2 = wx.Button(self, wx.ID_OK, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: annotationContentsDialog.__set_properties
        self.SetTitle("Annotation Contents")
        self.SetSize((400, 300))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: annotationContentsDialog.__do_layout
        grid_sizer_21 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_21.Add(self.annotationtext, 0, wx.EXPAND, 0)
        grid_sizer_21.Add(self.button_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.SetSizer(grid_sizer_21)
        grid_sizer_21.AddGrowableRow(0)
        grid_sizer_21.AddGrowableCol(0)
        self.Layout()
        # end wxGlade

# end of class annotationContentsDialog


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    chronoframe = chronoFrame(None, -1, "")
    app.SetTopWindow(chronoframe)
    chronoframe.Show()
    app.MainLoop()
